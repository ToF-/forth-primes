32 CONSTANT SMALL-PRIMES-LIMIT
CREATE SMALL-PRIMES
HERE 2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 ,
HERE SWAP - CELL / CONSTANT MAX-SMALL-PRIMES

: TEST-SMALL-PRIMES
    MAX-SMALL-PRIMES 0 DO
        SMALL-PRIMES I CELLS + @ . CR
    LOOP ;

SMALL-PRIMES-LIMIT DUP * CONSTANT MEDIUM-PRIMES-LIMIT
20 CONSTANT P-INFO-PER-BYTE
MEDIUM-PRIMES-LIMIT P-INFO-PER-BYTE / 1+ CONSTANT MEDIUM-PRIMES-TABLE-SIZE

CREATE MEDIUM-PRIMES-TABLE MEDIUM-PRIMES-TABLE-SIZE ALLOT

: MEDIUM-PRIMES-ADDRESS ( n -- addr )
    20 / MEDIUM-PRIMES-TABLE + ;

: MEDIUM-PRIMES-BIT# ( n -- bit# )
    DUP 20 MOD 5 / 2*
    SWAP 10 MOD 3 MOD 0= NEGATE + ;

: MARK-AS-COMPOSITE ( n -- )
    DUP 2 MOD 0=
    OVER 5 MOD 0= OR IF
        DROP
    ELSE
        DUP MEDIUM-PRIMES-BIT# 1 SWAP LSHIFT 255 XOR SWAP
        MEDIUM-PRIMES-ADDRESS DUP C@ ROT AND SWAP C!
    THEN ;

: INIT-MEDIUM-PRIMES-TABLE
    MEDIUM-PRIMES-TABLE MEDIUM-PRIMES-TABLE-SIZE 255 FILL
    1 MARK-AS-COMPOSITE
    MAX-SMALL-PRIMES 1 DO
        SMALL-PRIMES I CELLS + @ DUP
        BEGIN
            OVER +
            DUP MEDIUM-PRIMES-LIMIT < WHILE
            DUP MARK-AS-COMPOSITE
        REPEAT 2DROP
    LOOP ;

: IS-MEDIUM-PRIME? ( n -- f )
    ASSERT( DUP MEDIUM-PRIMES-LIMIT < )
    ASSERT( DUP 1 > )
    DUP 2 MOD 0= IF 2 = ELSE DUP 5 MOD 0= IF 5 = ELSE
        DUP MEDIUM-PRIMES-BIT# 1 SWAP LSHIFT SWAP
        MEDIUM-PRIMES-ADDRESS C@ SWAP AND
    THEN THEN ;

INIT-MEDIUM-PRIMES-TABLE

: TEST-MEDIUM-PRIMES
    0
    MEDIUM-PRIMES-LIMIT 2 DO
        I IS-MEDIUM-PRIME? IF I . 1+ THEN
    LOOP
    CR . ." primes" ;

TEST-MEDIUM-PRIMES
BYE









